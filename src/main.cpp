/************************************************************************************
 * WrightEagle (Soccer Simulation League 2D)                                        *
 * BASE SOURCE CODE RELEASE 2010                                                    *
 * Copyright (C) 1998-2010 WrightEagle 2D Soccer Simulation Team,                   *
 *                         Multi-Agent Systems Lab.,                                *
 *                         School of Computer Science and Technology,               *
 *                         University of Science and Technology of China, China.    *
 *                                                                                  *
 * This program is free software; you can redistribute it and/or                    *
 * modify it under the terms of the GNU General Public License                      *
 * as published by the Free Software Foundation; either version 2                   *
 * of the License, or (at your option) any later version.                           *
 *                                                                                  *
 * This program is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    *
 * GNU General Public License for more details.                                     *
 *                                                                                  *
 * You should have received a copy of the GNU General Public License                *
 * along with this program; if not, write to the Free Software                      *
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.  *
 ************************************************************************************/

#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <sstream>
#include "Coach.h"
#include "Player.h"
#include "ServerParam.h"
#include "PlayerParam.h"
#include "Logger.h"
#include "DynamicDebug.h"

#ifndef WIN32
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#endif

namespace {
#ifndef WIN32
void create_dump(void)
{
	if(!fork()) {
		abort(); //cause to send SIGABRT to itself, a core dump is generated by default
	}
}
#endif

void signal_catcher(int sig)
{
#ifndef WIN32
	signal(sig, signal_catcher);

	std::cerr << "catch signal " << sig << std::endl;

	create_dump(); //先产生coredump

	std::cerr << "exiting safely now" << std::endl;

	Logger::instance().LogSight();
	Logger::instance().SetFlushCond(); // set flush cond and let the logger thread flush the logs to file.
	DynamicDebug::instance().AddMessage("---Aborted", MT_Send);

	WaitFor(100); // wait logger thread to finish flushing

	exit(0); //这里会调用静态对象的析构函数
#endif
}
}

void RegisterSignalHandler();

//==============================================================================
int main(int argc, char* argv[])
{
	RegisterSignalHandler();

	ServerParam::instance().init(argc, argv);
	PlayerParam::instance().init(argc, argv);

	Client *client = 0;

	if (PlayerParam::instance().isCoach()) {
		client = new Coach;
	}
	else {
		client = new Player;
	}

	if (PlayerParam::instance().DynamicDebugMode()) {
		client->RunDynamicDebug(); // 进入动态调试模式
	}
	else {
		client->RunNormal(); // 进入正常比赛模式
	}

	delete client;

	return 0;
}


void RegisterSignalHandler()
{
#ifndef WIN32
	if(signal(SIGINT, signal_catcher) == SIG_ERR) //中断
		perror("SIGINT"), exit(1);
	if(signal(SIGQUIT, signal_catcher) == SIG_ERR) //退出
		perror("SIGQUIT"), exit(1);
//	if(signal(SIGABRT, signal_catcher) == SIG_ERR) //不能注册SIGABRT，否则调用 abort 时，会产生死循环
//		perror("SIGABRT"), exit(1);
	if(signal(SIGSEGV, signal_catcher) == SIG_ERR) //段错误
		perror("SIGSEGV"), exit(1);
	if(signal(SIGILL, signal_catcher) == SIG_ERR) //非法指令
		perror("SIGILL"), exit(1);
	if(signal(SIGFPE, signal_catcher) == SIG_ERR) //浮点异常
		perror("SIGFPE"), exit(1);
#endif
}
