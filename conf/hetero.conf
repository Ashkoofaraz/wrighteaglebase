#异构分配的测试脚本
#由角色、测试场景和权重组成
#对某一角色的球员进行测试时，对所有可选的异构类型，按照一个或多个测试场景进行测试，
#计算出测试成绩，然后根据相应场景的权重计算评价值，最后择优选取。
#场景规则如下：
#
# AtomicAction ::= {Kick|Turn|Dash}(\(param\))?
# Setting ::= {Cycle|Distance}(limit)
# ResetFlag ::= ^
# Action ::= [AtomicAction, Setting](ResetFlag)?
# ActionGroup ::= (Action)+ | [ActionGroup, Setting](ResetFlag)?
# Scene ::= [ActionGroup, Setting]
#
#测试过程类似赛跑，根据场景的设置不同，目前组要有分：
#	1、定时跑：给定跑的周期和最大速度，比较谁跑的远；
#	2、定距离跑：给定跑得距离和最大速度，看谁先跑到；
#	3、带球跑：跑几个周期，踢一下球，看谁跑的快。
#	4、其他。。。（以上跑法的组合）
#通过设计新的场景，容易实现其他跑法。

#role act_group @ weight
FC [S(1.2),C(60)]@1
FC [[S(1.2),C(5)][K,C(1)],D(45)]@1
FC [S(1.2),C(10)]@1.5
FC Kr@1.0 Km@0.5 In@0.25

FS [S(1.2),C(60)]@1
FS [[S(1.2),C(5)][K,C(1)],D(45)]@1
FS [S(1.2),C(10)]@1.5
FS Kr@1.0 Km@0.5 In@0.25

MC [S(1.2),D(50)]@1
MC [[[S(0.8),C(15)]^,C(60)]^[S(1.2),D(15)], C(1)]@1.6
MC Kr@0.5 Km@0.5 In@0.25

MS [S(1.2),D(50)]@1
MS [[[S(0.8),C(15)]^,C(60)]^[S(1.2),D(15)], C(1)]@1.6
MS Kr@0.5 Km@0.5 In@0.25

BS [S(1.2),D(50)]@1.2
BS [[[S(0.8),C(15)]^,C(50)]^[S(1.2),D(15)], C(1)]@1
BS Kr@0.5 Km@1.0 In@0.25

BC [S(1.2),D(50)]@1.2
BC [[[S(0.8),C(15)]^,C(50)]^[S(1.2),D(15)], C(1)]@1
BC Kr@0.5 Km@1.0 In@0.25

GL [S(1.2),C(4)]@1.5
GL Kr@0.0 Km@0.0 In@1.0
